{"ts":1351807326304,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"  dojo.require(\"esri.map\");\r\n  dojo.require(\"esri.dijit.Legend\");\r\n  dojo.require(\"esri.dijit.Scalebar\");\r\n  dojo.require(\"esri.arcgis.utils\");\r\n  dojo.require(\"esri.IdentityManager\");\r\n  dojo.require(\"dijit.dijit\");\r\n  dojo.require(\"dijit.layout.BorderContainer\");\r\n  dojo.require(\"dijit.layout.ContentPane\");\r\n  dojo.require(\"dijit.layout.StackContainer\");\r\n  dojo.require(\"esri.dijit.Popup\");\r\n  dojo.require(\"dojo.dnd.move\");\r\n\r\n\r\n     var map, urlObject, i18n, chooseLayer, swipeslider, swipediv, clipval, offset_left, offset_top, swipelayerid=\"\", swipeconnect=null, mapPoint, layers, setFeatures = true;\r\n     var mapLoaded = false;\r\n\r\n\t function initMap() {\r\n       patchID();\r\n\r\n       i18n = dojo.i18n.getLocalization(\"esriTemplate\",\"template\");\r\n       dojo.byId('loading').innerHTML = i18n.viewer.loading.message;\r\n       dojo.byId('legTogText').innerHTML = i18n.viewer.legToggle.down;\r\n\r\n       if(configOptions.geometryserviceurl && location.protocol === \"https:\"){\r\n         configOptions.geometryserviceurl = configOptions.geometryserviceurl.replace('http:','https:');\r\n       }\r\n       esri.config.defaults.geometryService = new esri.tasks.GeometryService(configOptions.geometryserviceurl);\r\n\r\n       if(!configOptions.sharingurl){\r\n         configOptions.sharingurl = location.protocol + '//' + location.host + \"/sharing/content/items\";\r\n       }\r\n       esri.arcgis.utils.arcgisUrl = configOptions.sharingurl;\r\n\r\n       if(!configOptions.proxyurl){\r\n         configOptions.proxyurl = location.protocol + '//' + location.host + \"/sharing/proxy\";\r\n       }\r\n\r\n       esri.config.defaults.io.proxyUrl =  configOptions.proxyurl;\r\n\r\n       esri.config.defaults.io.alwaysUseProxy = false;\r\n\r\n       urlObject = esri.urlToObject(document.location.href);\r\n       urlObject.query = urlObject.query || {};\r\n\r\n       if(urlObject.query.title){\r\n         configOptions.title = urlObject.query.title;\r\n       }\r\n       if(urlObject.query.subtitle){\r\n         configOptions.title = urlObject.query.subtitle;\r\n       }\r\n       if(urlObject.query.webmap){\r\n         configOptions.webmap = urlObject.query.webmap;\r\n       }\r\n       if(urlObject.query.bingMapsKey){\r\n         configOptions.bingmapskey = urlObject.query.bingMapsKey;\r\n       }\r\n\r\n\t   esri.arcgis.utils.arcgisUrl = configOptions.sharingurl;\r\n\r\n\t  var popup = new esri.dijit.Popup({\r\n\t\thighlight:true\r\n      }, dojo.create(\"div\"));\r\n\r\n\t   var mapDeferred = esri.arcgis.utils.createMap(configOptions.webmap, \"map\", {\r\n         mapOptions: {\r\n           slider: true,\r\n           nav: false,\r\n           wrapAround180:true,\r\n\t\t   infoWindow:popup\r\n         },\r\n         ignorePopups:false,\r\n         bingMapsKey: configOptions.bingmapskey\r\n       });\r\n\r\n       mapDeferred.addCallback(function (response) {\r\n\r\n\t\t document.title = configOptions.title|| response.itemInfo.item.title || \"\";\r\n         dojo.byId(\"title\").innerHTML = configOptions.title ||response.itemInfo.item.title;\r\n         dojo.byId(\"subtitle\").innerHTML = configOptions.subtitle|| response.itemInfo.item.snippet || \"\";\r\n\r\n         map = response.map;\r\n\r\n\t\t dojo.connect(map,\"onUpdateEnd\",hideLoader);\r\n\t\t dojo.connect(map,\"onClick\",function(event){\r\n\t\t\t mapPoint = event.mapPoint;\r\n\t\t });\r\n\t\t dojo.connect(popup,\"onSetFeatures\",function(){\r\n\t\t\t if (setFeatures == true){\r\n\t\t\t\t var selectedFeatures = [];\r\n\t\t\t\t dojo.forEach(popup.features,function(lyr,i){\r\n\t\t\t\t\t if(lyr.geometry.type == 'polygon'){\r\n\t\t\t\t\t\t if (lyr.geometry.contains(mapPoint) == true){\r\n\t\t\t\t\t\t\t selectedFeatures.push(lyr);\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t }\r\n\t\t\t\t });\r\n\t\t\t\t setFeatures = false;\r\n\t\t\t\t popup.setFeatures(selectedFeatures);\r\n\t\t\t }\r\n\t\t\t else{\r\n\t\t\t\t setFeatures = true;\r\n\t\t\t }\r\n\t\t });\r\n\r\n         layers = response.itemInfo.itemData.operationalLayers;\r\n\r\n         if(map.loaded){\r\n           initUI(layers);\r\n\t\t   populateLayerList();\r\n\t\t   if(configOptions.showLegend == false){\r\n\t\t\t   $(\"#legendToggle\").hide();\r\n\t\t   }\r\n         }\r\n         else{\r\n           dojo.connect(map,\"onLoad\",function(){\r\n             initUI(layers);\r\n\t\t\t populateLayerList();\r\n\t\t\t if(configOptions.showLegend == false){\r\n\t\t\t   $(\"#legendToggle\").hide();\r\n\t\t   \t }\r\n           });\r\n         }\r\n         //resize the map when the browser resizes\r\n         dojo.connect(dijit.byId('map'), 'resize', map,map.resize);\r\n       });\r\n\r\n       mapDeferred.addErrback(function (error) {\r\n         alert(i18n.viewer.errors.createMap + \" \" + dojo.toJson(error.message));\r\n       });\r\n\r\n     }\r\n\r\n\r\n     function initUI(layers) {\r\n       //add chrome theme for popup\r\n       dojo.addClass(map.infoWindow.domNode, \"chrome\");\r\n       //add the scalebar\r\n       var scalebar = new esri.dijit.Scalebar({\r\n         map: map,\r\n         scalebarUnit:i18n.viewer.main.scaleBarUnits //metric or english\r\n       });\r\n\r\n       var layerInfo = buildLayersList(layers);\r\n\r\n       if(layerInfo.length > 0){\r\n         var legendDijit = new esri.dijit.Legend({\r\n           map:map,\r\n           layerInfos:layerInfo\r\n         },\"legendDiv\");\r\n         legendDijit.startup();\r\n       }\r\n       else{\r\n         $(\"#legendToggle\").hide();\r\n       }\r\n     }\r\n\r\n//build a list of layers to dispaly in the legend\r\n  function buildLayersList(layers){\r\n\r\n //layers  arg is  response.itemInfo.itemData.operationalLayers;\r\n  var layerInfos = [];\r\n  dojo.forEach(layers, function (mapLayer, index) {\r\n      var layerInfo = {};\r\n      if (mapLayer.featureCollection && mapLayer.type !== \"CSV\") {\r\n        if (mapLayer.featureCollection.showLegend === true) {\r\n            dojo.forEach(mapLayer.featureCollection.layers, function (fcMapLayer) {\r\n              if (fcMapLayer.showLegend !== false) {\r\n                  layerInfo = {\r\n                      \"layer\": fcMapLayer.layerObject,\r\n                      \"title\": mapLayer.title,\r\n                      \"defaultSymbol\": false\r\n                  };\r\n                  if (mapLayer.featureCollection.layers.length > 1) {\r\n                      layerInfo.title += \" - \" + fcMapLayer.layerDefinition.name;\r\n                  }\r\n                  layerInfos.push(layerInfo);\r\n              }\r\n            });\r\n          }\r\n      } else if (mapLayer.showLegend !== false && mapLayer.layerObject) {\r\n      var showDefaultSymbol = false;\r\n      if (mapLayer.layerObject.version < 10.1 && (mapLayer.layerObject instanceof esri.layers.ArcGISDynamicMapServiceLayer || mapLayer.layerObject instanceof esri.layers.ArcGISTiledMapServiceLayer)) {\r\n        showDefaultSymbol = true;\r\n      }\r\n      layerInfo = {\r\n        \"layer\": mapLayer.layerObject,\r\n        \"title\": mapLayer.title,\r\n        \"defaultSymbol\": showDefaultSymbol\r\n      };\r\n        //does it have layers too? If so check to see if showLegend is false\r\n        if (mapLayer.layers) {\r\n            var hideLayers = dojo.map(dojo.filter(mapLayer.layers, function (lyr) {\r\n                return (lyr.showLegend === false);\r\n            }), function (lyr) {\r\n                return lyr.id;\r\n            });\r\n            if (hideLayers.length) {\r\n                layerInfo.hideLayers = hideLayers;\r\n            }\r\n        }\r\n        layerInfos.push(layerInfo);\r\n    }\r\n  });\r\n  return layerInfos;\r\n  }\r\n\r\n     function patchID() {  //patch id manager for use in apps.arcgis.com\r\n       esri.id._isIdProvider = function(server, resource) {\r\n       // server and resource are assumed one of portal domains\r\n\r\n       var i = -1, j = -1;\r\n\r\n       dojo.forEach(this._gwDomains, function(domain, idx) {\r\n         if (i === -1 && domain.regex.test(server)) {\r\n           i = idx;\r\n         }\r\n         if (j === -1 && domain.regex.test(resource)) {\r\n           j = idx;\r\n         }\r\n       });\r\n\r\n       var retVal = false;\r\n\r\n       if (i > -1 && j > -1) {\r\n         if (i === 0 || i === 4) {\r\n           if (j === 0 || j === 4) {\r\n             retVal = true;\r\n           }\r\n         }\r\n         else if (i === 1) {\r\n           if (j === 1 || j === 2) {\r\n             retVal = true;\r\n           }\r\n         }\r\n         else if (i === 2) {\r\n           if (j === 2) {\r\n             retVal = true;\r\n           }\r\n         }\r\n         else if (i === 3) {\r\n           if (j === 3) {\r\n             retVal = true;\r\n           }\r\n         }\r\n       }\r\n\r\n       return retVal;\r\n     };\r\n    }\r\n\r\n\tfunction hideLoader(){\r\n\t  if (mapLoaded == false){\r\n\t\tmapLoaded = true;\r\n\t\t$(\"#loadingCon\").hide();\r\n\t\t$(\"#swipeImg\").css('left',((map.width/2)-80));\r\n\t\t$(\"#swipeImg\").css('top',((map.height/2)-50));\r\n\t\t$(\"#swipeImg\").show();\r\n\t  }\r\n\t}\r\n\r\n\t//Jquery Layout\r\n\t$(document).ready(function(e) {\r\n\t  $(\"#legendToggle\").click(function(){\r\n\t\tif ($(\"#legendDiv\").css('display')=='none'){\r\n\t\t  $(\"#legTogText\").html(i18n.viewer.legToggle.up);\r\n\t\t}\r\n\t\telse{\r\n\t\t  $(\"#legTogText\").html(i18n.viewer.legToggle.down);\r\n\t\t}\r\n\t\t$(\"#legendDiv\").slideToggle();\r\n\t  });\r\n    });\r\n\r\n\t//Swipe Control\r\n\tfunction populateLayerList(){\r\n\t  var select = dojo.byId(\"layerlistdd\");\r\n\t  if (map.graphics.graphics.length > 0) {\r\n\t\tselect.options[select.options.length] = new Option(\"Graphics Layer\", map.graphics.id,\"selected\");\r\n\t  }\r\n\t  //reverse to get the correct order of layers added to map\r\n\t  var layerids = dojo.clone(map.layerIds).reverse();\r\n\t  dojo.forEach(layerids, function(id, index){\r\n\t\tselect.options[select.options.length] = new Option(id, id);\r\n\t  });\r\n\t  select.disabled= false;\r\n\t  startswipe();\r\n\t}\r\n\r\n\tfunction initswipe() {\r\n      chooseLayer = configOptions.chooseSwipeLevel;\r\n\t  swipelayerid = dojo.byId(\"layerlistdd\")[chooseLayer].value;\r\n      clipval = map.width;\r\n      swipediv = null;\r\n      if (swipelayerid == map.graphics.id) {\r\n        //console.log(\"Graphics layer\");\r\n        //map.graphics._div.parent.rawNode.id\r\n        swipediv = dojo.byId(map.container.id + \"_gc\");\r\n      }\r\n      else {\r\n        var layer = map.getLayer(swipelayerid);\r\n        //console.log(layer);\r\n        if (layer == null || layer == undefined) {\r\n          alert(i18n.viewer.errors.notDefined);\r\n          return;\r\n        }\r\n        swipediv = layer._div;\r\n\t  }\r\n      if (swipediv === undefined) {\r\n        alert(i18n.viewer.errors.undfnd);\r\n        return;\r\n      }\r\n\t  if (swipediv.style === undefined) {\r\n\t\talert(i18n.viewer.errors.noStyle);\r\n\t\treturn;\r\n\t  }\r\n      //console.log(\"Swipe ready to use on layer: \" + swipelayerid);\r\n    }\r\n\r\n    function startswipe(){\r\n      //map.hideZoomSlider();\r\n      //console.log(\"Swipe tool initializing ...\");\r\n\r\n      initswipe();\r\n\r\n      if (swipeslider != undefined || swipeslider != null) {\r\n        //console.log(\"swipe slider is visible? should not happen\");\r\n        //console.log(swipeslider);\r\n\t  }\r\n\r\n\t  //swipelayerid = dojo.byId(\"layerlistdd\").value;\r\n\t  //dojo.byId(\"layerlistdd\").disabled = true;\r\n\r\n\t  if (swipelayerid === undefined || swipelayerid == \"\") {\r\n        alert(i18n.viewer.errors.notDefined);\r\n        return;\r\n      }\r\n      swipeslider = new dojo.dnd.move.parentConstrainedMoveable(\"sliderdiv\", {\r\n        area: \"content\",\r\n        within: true\r\n      });\r\n\r\n      swipeslider.node.style.height = map.height + \"px\";\r\n      swipeslider.node.style.top = \"0px\";\r\n      swipeslider.node.style.left = ((map.width/2)-4) + \"px\";\r\n\t  if (iPad == true){\r\n\t\tswipeslider.node.style.left = ((map.width/2)-7) + \"px\";\r\n\t  }\r\n      clipval = ((map.width/2)-4);\r\n\r\n      //Just a check, should not call this function here\r\n        if (swipediv != null)\r\n        clearClip();\r\n\r\n        //console.log(\"Swipe layer: \" + swipelayerid);\r\n\r\n        if (swipelayerid == null || swipelayerid == \"\") {\r\n          alert(i18n.viewer.errors.notDefined);\r\n          return;\r\n        }\r\n\r\n        cliplayer(swipelayerid);\r\n      }\r\n\r\n      function cliplayer(layerid){\r\n        //Initial swipe slider location\r\n        swipe(dojo.byId(\"sliderdiv\").style.left);\r\n\r\n        //Make the slider visible\r\n        dojo.byId(\"sliderdiv\").style.display = \"\";\r\n\r\n        dojo.connect(swipeslider, \"onMoveStart\", function(args){\r\n        //console.log(\"move start\");\r\n        //this.node.style.opacity = \"0.5\";\r\n        //dojo._setOpacity(this.node, 0.5);\r\n\t\t$(\"#sliderdiv\").fadeTo(\"fast\",\"0.5\");\r\n\t\t$(\"#swipeImg\").fadeOut();\r\n\r\n      });\r\n      swipeconnect = dojo.connect(swipeslider, 'onMove', function(args){\r\n        this.node.style.top = \"0px\"; //needed to avoid offset\r\n        var left = parseInt(this.node.style.left);\r\n        //console.log(left + \", \" + (map.width));\r\n        if (left <=0 || left >= (map.width)) return;\r\n          clipval = this.node.style.left;\r\n          swipe(clipval);\r\n        });\r\n        dojo.connect(swipeslider, \"onMoveStop\", function(args){\r\n          //console.log(\"move stop event\");\r\n          //this.node.style.opacity = \"1.0\";\r\n          //dojo._setOpacity(this.node, 1.0);\r\n\t\t  $(\"#sliderdiv\").fadeTo(\"fast\",\"1.5\");\r\n        });\r\n        panEndConnect = dojo.connect(map, 'onPanEnd', function(args){\r\n          //console.log(\"pan end event - refreshing swipe position\");\r\n          swipe(clipval);\r\n        });\r\n\r\n        if (map.navigationMode === \"css-transforms\") {\r\n          panConnect = dojo.connect(map, 'onPan', function(args){\r\n          //console.log(\"pan end event - refreshing swipe position\");\r\n          swipe(clipval);\r\n        });\r\n      }\r\n    }\r\n\r\n    function clearClip(){\r\n      //console.log(\"Clearing clip\");\r\n      if (swipediv != null) {\r\n        swipediv.style.clip = dojo.isIE ? \"rect(auto auto auto auto)\" : \"\";\r\n      }\r\n    }\r\n\r\n    function swipe(val){\r\n      if (swipediv != null) {\r\n        offset_left = parseFloat(swipediv.style.left);\r\n        offset_top = parseFloat(swipediv.style.top);\r\n\r\n        //console.log(\"Val: \" + val);\r\n\r\n        var rightval, leftval, topval, bottomval;\r\n\r\n        if (offset_left > 0) {\r\n          rightval = parseFloat(val) - Math.abs(offset_left);\r\n          leftval = -(offset_left);\r\n        }\r\n        else\r\n        if (offset_left < 0) {\r\n          leftval = 0;\r\n          rightval = parseFloat(val) + Math.abs(offset_left);\r\n        }\r\n        else {\r\n          leftval = 0;\r\n          rightval = parseFloat(val);\r\n        }\r\n        if (offset_top > 0) {\r\n          topval = -(offset_top);\r\n          bottomval = map.height - offset_top;\r\n\t\t}\r\n        else\r\n        if (offset_top < 0) {\r\n          topval = 0;\r\n          bottomval = map.height + Math.abs(offset_top);\r\n        }\r\n        else {\r\n          topval = 0;\r\n          bottomval = map.height;\r\n        }\r\n\r\n        // If CSS Transformation is applied to the layer (i.e. swipediv),\r\n        // record the amount of translation and adjust clip rect\r\n        // accordingly\r\n        var tx = 0, ty = 0;\r\n        if (map.navigationMode === \"css-transforms\") {\r\n          var prefix = \"\";\r\n          if (dojo.isWebKit) {\r\n            prefix = \"-webkit-\";\r\n          }\r\n          if (dojo.isFF) {\r\n            prefix = \"-moz-\";\r\n          }\r\n          if (dojo.isIE) {\r\n            prefix = \"-ms-\";\r\n          }\r\n          if (dojo.isOpera) {\r\n            prefix = \"-o-\";\r\n          }\r\n\r\n          var transformValue = swipediv.style.getPropertyValue(prefix + \"transform\");\r\n\r\n          if(transformValue) {\r\n\t\t\tif(transformValue.toLowerCase().indexOf(\"translate3d\") !== -1) {\r\n\t\t\t  transformValue = transformValue.replace(\"translate3d(\", \"\").replace(\")\", \"\").replace(/px/ig, \"\").replace(/\\s/i, \"\").split(\",\");\r\n\t\t\t}\r\n\t\t\telse if(transformValue.toLowerCase().indexOf(\"translate\") !== -1) {\r\n\t\t\t  transformValue = transformValue.replace(\"translate(\", \"\").replace(\")\", \"\").replace(/px/ig, \"\").replace(/\\s/i, \"\").split(\",\");\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(transformValue);\r\n\r\n\t\t\ttry {\r\n\t\t\t  tx = parseFloat(transformValue[0]);\r\n\t\t\t  ty = parseFloat(transformValue[1]);\r\n\t\t\t} catch(e) {\r\n\t\t\t  alert(\"Error cannot continue\");\r\n\t\t\t  console.error(e);\r\n\t\t\t}\r\n\r\n            //console.log(\"transform = \", tx, ty);\r\n            leftval -= tx;\r\n            rightval -= tx;\r\n            topval -= ty;\r\n            bottomval -= ty;\r\n          }\r\n        }\r\n\r\n        //Syntax for clip \"rect(top,right,bottom,left)\"\r\n        //var clipstring = \"rect(0px \" + val + \"px \" + map.height + \"px \" + \" 0px)\";\r\n        var clipstring = \"rect(\" + topval + \"px \" + rightval + \"px \" + bottomval + \"px \" + leftval + \"px)\";\r\n        //console.log(\"New Clip string(T,R,B,L): \" + clipstring);\r\n        swipediv.style.clip = clipstring;\r\n      }\r\n\t}\r\n\r\n    //This is called when \"Stop Swipe\" button is clicked\r\n    function stopswipe(){\r\n      map.showZoomSlider();\r\n      //console.log(\"Swipe tool disabled!\");\r\n      swipeslider = null;\r\n      //dojo.byId(\"layerlistdd\").disabled = false;\r\n      dojo.byId(\"sliderdiv\").style.display = \"none\";\r\n      if (swipeconnect)\r\n      dojo.disconnect(swipeconnect);\r\n      if (panEndConnect)\r\n      dojo.disconnect(panEndConnect);\r\n      if (panConnect)\r\n      dojo.disconnect(panConnect);\r\n      clearInterval(animtimer);\r\n      clearInterval(flashtimer);\r\n      if (swipediv != null) {\r\n        swipediv.style.clip = dojo.isIE ? \"rect(auto auto auto auto)\" : \"\";\r\n        swipediv = null;\r\n      }\r\n\t}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":16925}]],"length":16925}
{"contributors":[],"silentsave":false,"ts":1351807579232,"patch":[[{"diffs":[[0,"r = new "],[-1,"dojo."],[0,"dnd.move"]],"start1":10814,"start2":10814,"length1":21,"length2":16}]],"length":16920,"saved":false}
